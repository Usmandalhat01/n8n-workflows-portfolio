{
  "name": "ai/InsolvencyAssistant",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹\nWelcome to Insolvency.AI",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -368,
        -16
      ],
      "id": "a19670dc-01eb-4abc-8118-5adadae2b1f0",
      "name": "When chat message received",
      "webhookId": "4c0661c4-ef50-424a-900d-17c47d98c2fd"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7373601d-fb91-464e-bf67-6650b4a08c62",
              "name": "question",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "dc1ac1c1-5ea5-40e8-8643-094b315bc230",
              "name": "tables_catalog",
              "value": "company_details: Details about companies company_property_relationships: Company land properties company_property_relationships2:  Company land properties company_charges: charges (liens, mortgages) held against a company, including charge holders and terms. company_cases: legal cases involving companies, including case IDs, statuses, and outcomes. company_officers: Information on current and past company officers including directors and secretaries, with tenure and role data.",
              "type": "string"
            },
            {
              "id": "adaa1eba-3bf9-465f-8ddf-e9b66caa463f",
              "name": "tables_schema",
              "value": "CREATE TABLE company_details (   `id` bigint ,   `name` varchar(191) ,   `number` char(8) ,   `reg_add_line_1` varchar(191) ,   `reg_add_line_2` varchar(191) ,   `reg_add_post_town` varchar(191) ,   `reg_add_county` varchar(191) ,   `reg_add_country` varchar(191) ,   `category` varchar(191) ,   `status` varchar(191) ,   `country_of_origin` varchar(191) ,   `dissolution_date` varchar(191) ,   `incorporation_date` date DEFAULT NULL,   `account_ref_day` varchar(255) ,   `account_ref_month` varchar(255) ,   `account_category` varchar(191) ,   `sic_text_1` text ,   `sic_text_2` text ,   `sic_text_3` text ,   `sic_text_4` text , ) ;  CREATE TABLE company_officers (   `id` bigint ,   `company_id` bigint ,   `name` varchar(191) ,   `address_line_1` varchar(191) ,   `address_line_2` varchar(191) ,   `address_postal_code` varchar(191) ,   `address_locality` varchar(191) ,   `address_region` varchar(191) ,   `address_country` varchar(191) ,   `address_premises` varchar(191) ,   `resigned_on` date DEFAULT NULL,   `date_of_birth_month` int DEFAULT NULL,   `date_of_birth_year` int DEFAULT NULL,   `appointed_on` date DEFAULT NULL,   `country_of_residence` varchar(191) ,   `officer_role` varchar(191) ,   `occupation` varchar(191) ,   `nationality` varchar(191) ) ;  CREATE TABLE `company_charges` (   `id` bigint UNSIGNED NOT NULL,   `company_id` bigint UNSIGNED NOT NULL,   `delivered_on` date DEFAULT NULL,   `status` varchar(191),   `charge_code` varchar(191) ,   `created_on` date DEFAULT NULL,   `charge_number` varchar(255) ,   `particulars_description` text ,   `particulars_type` varchar(191) ,   `particulars_contains_negative_pledge` tinyint DEFAULT NULL,   `classification_type` varchar(191) ,   `classification_description` text ,   `created_at` timestamp NULL DEFAULT NULL, ) ;  CREATE TABLE `company_cases` (   `id` bigint UNSIGNED NOT NULL,   `company_id` bigint UNSIGNED NOT NULL,   `type` varchar(191),   `case_number` integer,   `status` varchar(191),   `created_at` timestamp NULL DEFAULT NULL, ) ;  CREATE TABLE `company_property_relationships` (   `company_number` varchar(50) ,   `company_name` varchar(255) ,   `title_number` varchar(50) ,   `property_type` enum('UK','OVERSEAS') ,   `price_paid_numeric` decimal(15,2) DEFAULT '0.00',   `tenure` varchar(50) ,   `county` varchar(100) ,   `date_proprietor_added` date DEFAULT NULL,   `data_from` varchar(100) ,   `created_at` timestamp NULL, ) ;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -16,
        32
      ],
      "id": "57ff500e-d32e-41b2-b256-3b2b82dc3f39",
      "name": "TableCatalog"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.question }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You're a MySQL generator specialized AIAssistant. You should return the sql ready to be used without additional details\nGiven an input question generate a sintaticaly correct sql query to satisfy the answer.\nAlways limit query to 10 rows unless its an aggregate query or the user has specified a specific rowcount. \nAlways use LIKE operator to search for company name.\nOnly generate one query.\nHere's the tables description\n{{ $json.tables_catalog }}\nHere's the schema:\n{{ $json.tables_schema }}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        208,
        64
      ],
      "id": "2c2fc793-e1d1-4fec-801c-97373b92684c",
      "name": "QueryGen"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"required\": [\"output\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        432,
        320
      ],
      "id": "ecc22f65-5b4e-436e-9c75-0d7a8e8d393c",
      "name": "output_parser"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar input = $input.all();\nvar json = input[0].json;\n\nif (json.output && typeof json.output == 'object' && json.output.query) {\n  json.output = json.output.query;\n  json.sql = json.output.query;\n} else if (json.output && typeof json.output==='string') {\n  json.sql = json.output\n}\nreturn input;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        144
      ],
      "id": "ca18e37e-a7ef-4102-9f7c-80193b6b4b41",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        784,
        208
      ],
      "id": "12c631d7-6f4d-4e45-a9d1-08342db20631",
      "name": "RawExecutor",
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "CRd5JbWb7lZmljJQ",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "55a49a16-1fa9-4830-8d11-d5cf8011317b",
              "name": "results",
              "value": "={{ $json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        112
      ],
      "id": "5d180cf3-5a9c-499d-9ccc-d9e0a36ebc3d",
      "name": "SaveResults"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('TableCatalog').item.json.question }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a response agent. You will receive a question and a response and your goal is to provide final explanation. Do not use database details and jargon to the user. Your final response should be devoid of technical software details\nSQL used: ```{{ $('Code').item.json.sql }}```\nResults:\n{{ $json.results }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1152,
        400
      ],
      "id": "f9baafcb-9e49-4073-8bb2-918f13f8b39a",
      "name": "ResponseAgent"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar input = $input.all();\nconsole.log(\"INPUT: \", input);\n// var json = input[0].json;\n\n// if (json.output && typeof json.output == 'object' && json.output.query) {\n//   json.output = json.output.query;\n// }\nreturn input;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        48
      ],
      "id": "b27789b3-a747-43bd-a676-b1bf6a581fcc",
      "name": "Code1"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "results"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1312,
        48
      ],
      "id": "59daaea8-3ac1-47e4-b8e2-21ed552bbb5f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-3-7-sonnet-20250219",
          "cachedResultName": "Claude 3.7 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        288,
        464
      ],
      "id": "3211523c-5ce3-4815-9a73-729f53ddb18f",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "DKrBn0pYDtehv6PF",
          "name": "claude-api"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "invoke-chat",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -416,
        352
      ],
      "id": "40b5ecc3-e56e-4585-aa8b-4802c0703e0c",
      "name": "Webhook",
      "webhookId": "57b88eed-a0a4-4b58-a3a8-22d51e8fb0b9"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        1552,
        240
      ],
      "id": "4d929ad9-0ba4-4dbc-871e-dda7d80a8371",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f5560ba9-4fca-4257-b784-eaa913e54193",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        240
      ],
      "id": "67e1f48b-1672-4790-9c1b-428c933db132",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        512,
        512
      ],
      "id": "deb4ed57-6d44-413f-be5f-63f073756984",
      "name": "OpenAI Chat Model"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "TableCatalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TableCatalog": {
      "main": [
        [
          {
            "node": "QueryGen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QueryGen": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output_parser": {
      "ai_outputParser": [
        [
          {
            "node": "QueryGen",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "RawExecutor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RawExecutor": {
      "main": [
        [
          {
            "node": "SaveResults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SaveResults": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "ResponseAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "QueryGen",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "ResponseAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ResponseAgent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "TableCatalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "11f7b859-62a6-4a64-9d2d-a8af1e813726",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "08055b552e6611728d9e3d82803686d88d87514124536a81604c916c12efc555"
  },
  "id": "rYLRXgDliBueGzni",
  "tags": []
}